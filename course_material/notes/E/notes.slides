<title>Relational DBMSs

<slide>
<heading>What is an RDBMS?
A <em>relational database management system</em> (RDBMS) is
<small>
<itemize>
<item> software designed to support large-scale data-intensive applications
<item> allowing high-level description of data (domains, constraints)
<item> with high-level access to the data (relational model, SQL)
<item> providing efficient storage and retrieval (disk/memory management)
<item> supporting multiple simultaneous users  (privilege, protection)
<item> doing multiple simultaneous operations (transactions, concurrency)
<item> maintaining reliable access to the stored data (backup, recovery)
</itemize>
</small>
Note: databases provide <em>persistent</em> storage of information
</slide>

<slide>
<heading>Description of Data
RDBMSs implement <$><approx></$> the relational model.
<p>
Provide facilities to define:
<itemize>
<item> domains, attributes, tuples, tables
<item> constraints (domain, key, reference, ...)
</itemize>
Variations from the relational model:
<itemize>
<item> no strict requirement for tables to have keys
<item> bag semantics, rather than set semantics
<item> no direct support for multi-table constraints
</itemize>
</slide>

<slide>
<heading>RDBMS Operations
RDBMSs typically provide at least the following operations:
<itemize>
<sitem> create/remove a database
<sitem> create/remove/alter table schemas within a database
<sitem> insert/delete/update tuples within a table
<sitem> queries on data, define named queries (views)
</itemize>
Most also provide mechanisms for
<itemize>
<sitem> defining new data types
<sitem> implementing complex constraints (triggers)
<sitem> defining/storing procedural code to manipulate data
<sitem> creating/managing users of the database
<sitem> describing transactional behaviour (see later)
</itemize>
</slide>

<slide>
<heading>Access to Data
All modern RDBMSs provide access to the data via SQL.
<p>
Each RDBMS has its own dialect <$><approx></$> the SQL standard.
<p>
Most provide SQL via one or more of
<itemize>
<item> an interactive <q>shell</q>
	<~> <small>(e.g. psql, sqlite3, SQL*Plus, ...)</small>
<item> programming language APIs
	<~> <small>(e.g. Java/JDBC, Python, C, ...)</small>
</itemize>
Some operations are also implemented as utility commands
<p>
e.g. PostgreSQL's <@>createdb</@>, <@>dropdb</@>, <@>createuser</@>, ...
</slide>

<slide>
<continued>
RDBMSs also provide access to meta-data (catalog).
<p>
Meta-data typically presented as collection of tables.
<p>
A standard <@>INFORMATION_SCHEMA</@> exists for meta-data.
<p>
DB users interact with catalog via meta-commands:
<itemize>
<sitem> PostgreSQL's <@>\d</@>, <@>\d</@> <$>Table</$>
<sitem> SQLite's <@>.schema</@>,  <@>.schema</@> <$>Table</$>
<sitem> Oracle's <@>select * from tab</@>
</itemize>
DB admin typically also has SQL access to catalog.
</slide>

<slide>
<heading>Schema/Data Import/Export
RDBMSs typically provide mechanisms for
<itemize>
<item> loading schemas <small>(typically from a file)</small>
<item> bulk upload of data into tables <small>(from files)</small>
<item> saving entire databases (data + meta-data)
<item> clearing tables <~> <small>(e.g. <@>delete from Staff</@>)</small>
<item> clearing schema <~> <small>(not in PostgreSQL)</small>
</itemize>
Available via command line or interactive SQL shell.
</slide>

<slide>
<heading>Query Engine
RDBMS query engines implement RA operations
<itemize>
<item> projection
	<~> <small>(tuple manipulation; generalised projection)</small>
<item> selection
	<~> <small>(tuple filtering; indexes, hashing)</small>
<item> join
	<~> <small>(nested-loop, hash-join, indexed-join)</small>
<item> set operations
	<~> <small>(union, intersection, difference)</small>
<item> aggregation
	<~> <small>(e.g. count, sum, avg, ...)</small>
<item> grouping
	<~> <small>(group-by, group filtering (via having))</small>
</itemize>
</slide>

<slide>
<heading>Privilege/Protection
RDBMSs typically provide role-based user management:
<itemize>
<item> individual <em>users</em> have username/password
<item> users may be associated with multiple <em>roles</em>
<item> roles are assigned privileges
	<~> <small>(e.g. create tables, view table R)</small>
</itemize>
Authentication via username/password gives access to DBs.
<p>
Roles determine what can be done within a DB.
</slide>

<slide>
<heading>Transactions/Concurrency
Often in application programming
<itemize>
<item> a single application-level operation (transaction)
<item> involves mutliple DBMS-level operations <small>(e.g. insert, update)</small>
</itemize>
To faithfully represent the application-level operation:
<itemize>
<item> either all DBMS-level operations must complete
<item> or all DBMS-level operations must fail
</itemize>
If the transaction fails partway
<itemize>
<item> any completed DBMS operations must be undone
<item> the DBMS should enforce this automatically
</itemize>
<i>Transactions</i> treat a group of DBMS operations as atomic.
</slide>

<slide>
<continued>
For serious applications, the RDBMS must be ACID ...
<deftable>
<row>
<col1> <b><red>A</red></b>tomicity </col1> 
<col2>
<small>
Either all operations of transaction are reflected in database or none are.
</small>
</col2>
</row>
<row>
<col1> <b><red>C</red></b>onsistency </col1>
<col2>
<small>
Execution of a transaction in isolation preserves data consistency
(i.e. maps a valid DB to a valid DB).
</small>
</col2>
</row>
<row>
<col1> <b><red>I</red></b>solation </col1>
<col2>
<small>
Transactions are <q>unaware</q> of other transactions executing concurrently.
</small>
</col2>
</row>
<row>
<col1> <b><red>D</red></b>urability </col1>
<col2>
<small>
After successful transaction, changes persist even if system later fails.
</small>
</col2>
</row>
</deftable>
DBMSs with these properties provide a strong guarantee that any update
operation will result in a valid database <small>(no corruption)</small>.
</slide>

<slide>
<heading>RDBMS Architecture
Typical client-server architecture for modern RDBMS:
<p>
<diagram>Pic/dbmsarch.png
<p>
Core of RDBMS = a relational algebra engine.
</slide>

<slide>
<heading>Examples of RDBMSs
Examples of ACID (serious) database management systems:
<itemize>
<item> Oracle
	<~> <small>(most widely-used commercial RDBMS)</small>
<item> IBM's DB2 
	<~> <small>(maybe the best relational <em>engine</em> + research backing)</small>
<item> Microsoft's SQL Server 
	<~> <small>(solid relational engine + research backing)</small>
<item> PostgreSQL
	<~> <small>(open-source, reliable, serious functionality)</small>
<item> MySQL
	<~> <small>(open-source, now has sufficient functionality)</small>
<item> SQLite
	<~> <small>(open-source, serverless, DB is a single file)</small>
<item> HyperSQL
	<~> <small>(open-source, 100% Java, serious functionality)</small>
<item> <gray>Informix, Sybase, Ingres,</gray> ... have all faded or are fading
</itemize>
</slide>

<slide>
<continued>
Most serious RDBMS's
<itemize>
<item> support all of the SQL:92 and SQL:99 standards
<item> support most of the SQL:2003 and SQL:2008 standards
</itemize>
Typical variations:
<itemize>
<sitem> mechanism for creating unique ID values (e.g. <@>SEQUENCE</@>)
<sitem> mechanism to return part of result set (e.g. <@>LIMIT</@>)
<sitem> extra data types <small>(not defined in standard)</small>
<sitem> many additional functions on data values
<sitem> don't support all SQL transaction levels
<sitem> <@>DROP</@> <$>Object</$> <@>IF EXISTS</@>
</itemize>
</slide>

<slide>
<heading>DB/Application Interaction
Database applications typically involve:
<itemize>
<item> code in an application language (e.g. Java, Python)
<item> definitions and queries in SQL (stored in DB)
<item> procedural code/transactions (stored in DB)
</itemize>
Code in multiple languages, stored in different places.
<p>
Interaction between app.code and DBMS
<itemize>
<item> is via a <q>thin pipe</q> (SQL in, tuples out)
<item> following old-fashioned file access pattern:
<sprogram>
open; while (more input) { get next; process; } close
</sprogram>
</itemize>
</slide>

<slide>
<continued>
A typical DB application has several types of code:
<itemize>
<item> UI (user interface) code, e.g. Python/HTML, Java/Swing
<item> application/business logic, e.g. Python, Java, PL/SQL
<item> data access, e.g. PL/SQL, SQL
</itemize>
Multiple code sources <$><Rightarrow></$> software management problems:
<itemize>
<item> maintaining consistency across code-bases
<item> minimising cross-talk (separation of concerns)
</itemize>
Patterns such as Model-View-Controller aim to manage this.
</slide>

<slide>
<continued>
Perfomance issues with data-intensive applications
<itemize>
<item> minimise traffic between app.code and DB <br>
	<small>(connection/communication costs are expensive)</small>
<item> <q>impedance mismatch</q> between app.code and DB <br>
	<small>(DB = tuple-set-at-a-time, Code = object-at-a-time)</small>
</itemize>
These suggest that
<itemize>
<item> as much as possible, data manipulation is pushed into DBMS
<item> but this requires a tight interaction between layers
</itemize>
<p>
Software engineering suggests minimal interaction between layers.
<p>
This conflict is not yet well-resolved.
</slide>

<slide>
<continued>
Standard paradigm for accessing DB from app.code
<program>
<comment>--  establish connection to DBMS</comment>
db = dbConnect("dbname=X user=Y passwd=Z");
query = "select a,b from R,S where ... ";
<comment>--  invoke query and get handle to result set</comment>
results = dbQuery(db, query);
<comment>--  for each tuple in result set</comment>
while (tuple = dbNext(results)) {
    <comment>--  process next tuple</comment>
    process(val(tuple,'a'), val(tuple,'b'));
}
dbClose(results);
</program>
</slide>
