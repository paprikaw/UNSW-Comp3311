<title>SQL Queries (v): Abstraction
<footer>COMP3311 20T3 <diamond> SQL: Abstraction <diamond>


<slide>
<heading>Complex Queries
For complex queries, it is often useful to
<itemize>
<item> break the query into a collection of smaller queries
<item> define the top-level query in terms of these
</itemize>
This can be accomplished in several ways in SQL:
<itemize>
<item> views <~> <small>(discussed in detail below)</small>
<item> subqueries in the <@>WHERE</@> clause
<item> subqueries in the <@>FROM</@> clause
<item> subqueries in a <@>WITH</@> clause
</itemize>
<~><br>
<small>
<@>VIEW</@>s and <@>WHERE</@> clause subqueries haveen discussed elsewhere.
<p>
<@>WHERE</@> clause subqueries can be <em>correlated</em> with the top-level query.
</small>
</slide>

<slide>
<continued>
<b>Example:</b> get a list of low-scoring students in each course
<br> <small>(low-scoring = mark is less than average mark for class)</small>
<p>
Schema: <$>Enrolment(course,student,mark)</$>
<p>
Approach:
<itemize>
<sitem> generate tuples containing <$>(course,student,mark,classAvg)</$>
<sitem> select just those tuples satisfying <$>(mark << classAvg)</$>
</itemize>
Implementation of first step via window function
<program>
SELECT course, student, mark,
       avg(mark) OVER (PARTITION BY course)
FROM   Enrolments;
</program>
We now look at several ways to complete this data request ...
</slide>

<slide>
<heading>Using Views for Abstraction
Defining complex queries using views:
<program>
CREATE VIEW
   CourseMarksWithAvg(course,student,mark,avg)
AS
SELECT course, student, mark,
       avg(mark) OVER (PARTITION BY course)
FROM   Enrolments;

SELECT course, student, mark
FROM   CourseMarksWithAvg
WHERE  mark << avg;
</program>
</slide>

<slide>
<continued>
In the general case:
<program>
CREATE VIEW <$>View<sub>1</sub></$>(<$>a,b,c,d</$>) AS <$>Query<sub>1</sub></$>;
CREATE VIEW <$>View<sub>2</sub></$>(<$>e,f,g</$>) AS <$>Query<sub>2</sub></$>;
...
SELECT <$>attributes</$>
FROM   <$>View<sub>1</sub></$>, <$>View<sub>2</sub></$>
WHERE  <$>conditions on attributes of View<sub>1</sub> and View<sub>2</sub></$>
</program>
Notes:
<itemize>
<sitem> look like tables <~> <small>(<q>virtual</q> tables)</small>
<sitem> exist as objects in the database <~> <small>(stored queries)</small>
<sitem> useful if specific query is required frequently
</itemize>
</slide>

<slide>
<heading><@>FROM</@>-clause Subqueries for Abstraction
Defining complex queries using <@>FROM</@> subqueries:
<program>
SELECT course, student, mark
FROM   (SELECT course, student, mark,
               avg(mark) OVER (PARTITION BY course)
        FROM   Enrolments) AS CourseMarksWithAvg
WHERE  mark << avg;
</program>
Avoids the need to define views.
</slide>

<slide>
<continued>
In the general case:
<syntax>
SELECT <$>attributes</$>
FROM   (<$>Query<sub>1</sub></$>) AS <$>Name<sub>1</sub></$>,
       (<$>Query<sub>2</sub></$>) AS <$>Name<sub>2</sub></$>
       ...
WHERE  <$>conditions on attributes of Name<sub>1</sub> and Name<sub>2</sub></$>
</syntax>
Notes:
<itemize>
<sitem> must provide name for each subquery, even if never used
<sitem> subquery table inherits attribute names from query <br>
	<small>(e.g. in the above, we assume that <$>Query<sub>1</sub></$> returns an attribute called <@>a</@>)</small>
</itemize>
</slide>

<slide>
<heading><@>WITH</@>-clause Subqueries for Abstraction
Defining complex queries using <@>WITH</@>:
<program>
WITH CourseMarksWithAvg AS
     (SELECT course, student, mark,
             avg(mark) OVER (PARTITION BY course)
      FROM   Enrolments)
SELECT course, student, mark, avg
FROM   CourseMarksWithAvg
WHERE  mark << avg;
</program>
Avoids the need to define views.
</slide>

<slide>
<continued>
In the general case:
<syntax>
WITH   <$>Name<sub>1</sub></$>(a,b,c) AS (<$>Query<sub>1</sub></$>),
       <$>Name<sub>2</sub></$> AS (<$>Query<sub>2</sub></$>), ...
SELECT <$>attributes</$>
FROM   <$>Name<sub>1</sub></$>, <$>Name<sub>2</sub></$>, ...
WHERE  <$>conditions on attributes of Name<sub>1</sub> and Name<sub>2</sub></$>
</syntax>
Notes:
<itemize>
<sitem> <$>Name<sub>1</sub></$>, etc. are like temporary tables
<sitem> named tables inherit attribute names from query
</itemize>
</slide>

<slide>
<heading>Recursive Queries
<@>WITH</@> also provides the basis for recursive queries.
<p>
Recursive queries are structured as:
<syntax>
WITH RECURSIVE <$>R</$>(<$>attributes</$>) AS (
     SELECT ... <$>not involving R</$>
   UNION
     SELECT ... FROM <$>R</$>, ...
)
SELECT <$>attributes</$>
FROM   <$>R</$>, ...
WHERE  <$>condition involving R's attributes</$>
</syntax>
<small>
Useful for scenarios in which we need to traverse multi-level relationships.
</small>
</slide>

<slide>
<continued>
For a definition like
<program>
WITH RECURSIVE R AS ( Q<sub>1</sub> UNION Q<sub>2</sub> )
</program>
<@>Q<sub>1</sub></@><~> does not include <~><@>R</@><~> <small>(base case)</small>;
<~~> <@>Q<sub>2</sub></@><~> includes <~><@>R</@><~> <small>(recursive case)</small>
<p>
How recursion works:
<program>
<$>Working</$> = <$>Result</$> = evaluate <$>Q<sub>1</sub></$>
while (<$>Working</$> table is not empty) {
    <$>Temp</$> = evaluate <$>Q<sub>2</sub></$>, using <$>Working</$> in place of <$>R</$>
    <$>Temp</$> = <$>Temp</$> - <$>Result</$>
    <$>Result</$> = <$>Result</$> UNION <$>Temp</$>
    <$>Working</$> = <$>Temp</$>
}
</program>
<~>
i.e. generate new tuples until we see nothing not already seen.
</slide>

<slide>
<continued>
<b>Example:</b> count numbers of all sub-parts in a given part.
<p>
Schema: <$>Parts(part, sub_part, quantity)</$>
<program80>
WITH RECURSIVE IncludedParts(sub_part, part, quantity) AS (
    SELECT sub_part, part, quantity
    FROM   Parts WHERE part = <$><blue>GivenPart</blue></$>
  UNION ALL
    SELECT p.sub_part, p.part, p.quantity
    FROM   IncludedParts i, Parts p
    WHERE  p.part = i.sub_part
  )
SELECT sub_part, SUM(quantity) as total_quantity
FROM   IncludedParts
GROUP  BY sub_part
</program>
<br>
Includes sub-parts, sub-sub-parts, sub-sub-sub-parts, etc.
</slide>
