#!/usr/bin/python3

'''
The msearch (movie search) script lists the movie title, year, content rating, IMDB score and genres of those movies with the title, actor, or director matching the given substring (case insensitive), one per line. It accepts any number of given substrings (but at least one). If more than one substring are provided, they should be considered as a conjunctive selection query (i.e., via AND).
'''

import sqlite3,sys

if len(sys.argv) < 2:
  print("Usage:",sys.argv[0],"YEAR")
  sys.exit(1)

sub_string = [sys.argv[i] for i in range (1, len(sys.argv))]

year = sys.argv[1]

try:
  con = sqlite3.connect('a2.db')
except sqlite3.Error as err:
    print("database error: ", err)

cur = con.cursor()

execute_seq = '''
select title, year, content_rating, imdb_score from
(select m.title, m.year, m.content_rating, r.imdb_score, d.name as director_name, group_concat(ac.name) as actor_name
from movie m
    left join acting a on a.movie_id = m.id
    left join actor ac on ac.id = a.actor_id
    left join director d on m.director_id = d.id
    left join rating r on m.id = r.movie_id
GROUP  BY m.title, m.year, m.content_rating, r.imdb_score, director_name) sub
where
'''

args = []
for i, substr in enumerate(sub_string):
  if i != 0:
    execute_seq  = execute_seq + " and"
  execute_seq = execute_seq + '''(upper(title) like upper(?)
     or upper(director_name) like upper(?)
     or upper(actor_name) like upper(?))
  '''
  arg_list = ['%'+substr+'%', '%'+substr+'%', '%'+substr+'%']
  args.extend(arg_list)
execute_seq = execute_seq + """
group by title, year, content_rating, imdb_score
  order by year DESC,
           imdb_score DESC,
           title ASC;
"""
cur.execute(execute_seq, args)
results = cur.fetchall()
# Find genre for each movie title
genre = {}
args = []
for movie in results:
  cur.execute('''
  select g.genre from genre g
  join movie m on g.movie_id = m.id
  where m.title = ?;
  ''', (movie[0],))
  genre_list = cur.fetchall()
  genre_list = [genre[0] for genre in genre_list]
  genre[movie[0]] = genre_list
 
 
for i in range(0, len(results)):
  genre_string = "[" + ",".join(genre[results[i][0]]) + "]"
  info_string = "(" + ", ".join([str(info) for info in results[i][1:4] if info != None]) + ")"
  info_string = "(" + ", ".join([f'{results[i][j]:.1f}' if j == 3 else str(results[i][j]) for j in range (1,4) if results[i][j] != None]) + ")"
  print ("{}. {} {} {}".format( i + 1, results[i][0], info_string, genre_string))
exit (0)